###
## Add your overrides to 3rd party fusion code here
###

prototype(Carbon.Link:Content) {
    @context.nodeDepth = ${this.node.depth - startingPoint.depth}
    @context.isSubLinkAndHasText = ${(nodeDepth > 1 && q(node).property('additionalInfo'))}

    value = Neos.Fusion:Case {
        isNode {
            condition = ${linkType == 'node'}
            renderer = Neos.Fusion:Value {
                node = ${Neos.Link.convertUriToObject(link, documentNode)}
                value = ${contentKey == 'title' ? q(this.node).property('title')  +  (isSubLinkAndHasText ? '<br/> <span class="nav-subline">' +  q(node).property('additionalInfo') + '</span>' : '')  : this.node.label}
            }
        }
    }
}



//<span @if.hasSubLink={props.isSubLink} class="nav-subline">{props.zusaetzlicherText}</span>

//prototype(Carbon.Link:Content) < prototype(Neos.Fusion:Value) {
//    link = ${link ? link : false}
//    contentKey = ${contentKey || 'title'}
//    @context {
//        link = ${this.link}
//        contentKey = ${this.contentKey}
//    }
//    isValid = Carbon.Link:Valid
//    @if.isValid = ${this.isValid || renderDefaultTagIfNoLink ? true : false}
//
//    value = Neos.Fusion:Case {
//        @context.linkType = Carbon.Link:Type {
//            isShortcut.condition = false
//        }
//
//        isAsset {
//            condition = ${linkType == 'asset'}
//            renderer = Carbon.Link:Asset
//        }
//        isNode {
//            condition = ${linkType == 'node'}
//            renderer = Neos.Fusion:Value {
//                node = ${Neos.Link.convertUriToObject(link, documentNode)}
//                value = ${contentKey == 'title' ? q(this.node).property('title') + '<br/> <span class="nav-subline">Entwicklung, Absicherung und Prozessberatung f√ºr die Automobilbranche</span>' : this.node.label}
//            }
//        }
//        isEmail {
//            condition = ${linkType == 'mail'}
//            renderer = ${String.replace(link, 'mailto:', '')}
//        }
//        isHttp {
//            condition = ${String.startsWith(link, 'http')}
//            renderer = ${String.pregReplace(link, '/^http(s)?:\/\//', '')}
//        }
//        isDoubleSlash {
//            condition = ${String.startsWith(link, '//')}
//            renderer = ${String.pregReplace(link, '/^\/\//', '')}
//        }
//        fallback {
//            condition = ${linkType ? true : false}
//            renderer = ${link}
//        }
//        noLink {
//            condition = true
//            renderer = false
//        }
//    }
//}

